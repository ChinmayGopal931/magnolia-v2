AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Magnolia V2 - Trading Platform

Parameters:
  DatabasePassword:
    Type: String
    Description: Password for the RDS PostgreSQL database
    NoEcho: true
    MinLength: 8
    
  HyperliquidKey:
    Type: String
    Description: Hyperliquid private key
    NoEcho: true
    Default: ''
    
  DriftKey:
    Type: String
    Description: Drift private key
    NoEcho: true
    Default: ''
    
  TelegramToken:
    Type: String
    Description: Telegram bot token
    NoEcho: true
    Default: ''

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: production
        AWS_REGION: !Ref AWS::Region

Resources:
  # VPC for RDS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: magnolia-vpc

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: magnolia-public-subnet-1

  # Public Subnet 2 (required for RDS subnet group)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: magnolia-public-subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: magnolia-igw

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: magnolia-public-route-table

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnets
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: magnolia-lambda-sg

  # RDS Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Magnolia RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: magnolia-rds-sg

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Magnolia RDS
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: magnolia-db-subnet-group

  # RDS Instance
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: magnolia-db
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: magnoliaadmin
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      StorageType: gp2
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      MultiAZ: false  # Single AZ to stay in free tier
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Parameter Store Entries
  HyperliquidKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /magnolia/hyperliquid_key
      Type: String
      Value: !Ref HyperliquidKey
      Description: Hyperliquid private key

  DriftKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /magnolia/drift_key
      Type: String
      Value: !Ref DriftKey
      Description: Drift private key

  TelegramTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /magnolia/telegram_token
      Type: String
      Value: !Ref TelegramToken
      Description: Telegram bot token

  DatabaseUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /magnolia/db_url
      Type: String
      Value: !Sub 'postgresql://magnoliaadmin:${DatabasePassword}@${Database.Endpoint.Address}/magnolia'
      Description: Database connection URL

  # API Lambda Function
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: magnolia-api
      CodeUri: ./dist
      Handler: lambda/api-handler.handler
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
      Environment:
        Variables:
          DATABASE_URL: !Sub 'postgresql://magnoliaadmin:${DatabasePassword}@${Database.Endpoint.Address}/magnolia'
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/magnolia/*'
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds-db:connect
            Resource: "*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET

  # DynamoDB Tables
  PositionCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: magnolia-position-cache
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: positionId
          AttributeType: S
      KeySchema:
        - AttributeName: positionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  TelegramSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: magnolia-telegram
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: N
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  AlertHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: magnolia-alerts
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: alertKey
          AttributeType: S
      KeySchema:
        - AttributeName: alertKey
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FundingCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: magnolia-funding
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 3
      AttributeDefinitions:
        - AttributeName: pair
          AttributeType: S
      KeySchema:
        - AttributeName: pair
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt Database.Endpoint.Address
    
  DatabasePort:
    Description: RDS Database Port
    Value: !GetAtt Database.Endpoint.Port